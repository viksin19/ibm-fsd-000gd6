package spring_rest.config;

import java.beans.PropertyVetoException;
import java.util.Properties;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBean;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import com.mchange.v2.c3p0.ComboPooledDataSource;
import com.mysql.cj.xdevapi.SessionFactory;
@Configuration
@EnableWebMvc
@EnableTransactionManagement
@ComponentScan(basePackages = "spring_rest")
public class CustomerConfig implements WebMvcConfigurer {
	
	
	@Bean
	public DataSource myDataSource() {
		ComboPooledDataSource myDataSource = new ComboPooledDataSource();
		
		myDataSource.setUser("root");
		
		try {
			myDataSource.setDriverClass("com.mysql.cj.jdbc.Driver");
		} catch (PropertyVetoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		myDataSource.setJdbcUrl("jdbc:mysql://localhost:3306/Vikramdb");
		myDataSource.setPassword("Vikramdb");
		myDataSource.setMaxPoolSize(30);
		myDataSource.setMinPoolSize(10);
		myDataSource.setMaxIdleTimeExcessConnections(30000);
		
		return myDataSource;
	}
	
	@Bean
	public LocalSessionFactoryBean sessionfactory() {
		LocalSessionFactoryBean sessionFactory = new LocalSessionFactoryBean();
		sessionFactory.setDataSource(myDataSource());
		sessionFactory.setHibernateProperties(getProperties());
		sessionFactory.setPackagesToScan("spring_rest");
		
		return sessionFactory;
		
	}

	

	public Properties getProperties() {
		// TODO Auto-generated method stub
		
		
		Properties props = new Properties();
		
		props.put("hibernate.dialect","org.hibernate.dialect.MySQLDialect");
		props.put("hibernate.show_sql", "true");
		return props ;
	}
	@Bean
	@Autowired
	public HibernateTransactionManager transactionManager(org.hibernate.SessionFactory sessionFactory) {
		HibernateTransactionManager txmanager  = new HibernateTransactionManager();
		
		txmanager.setSessionFactory(sessionFactory);
		return txmanager;
		
	}
	

}
